#@yaml/text-templated-strings
#@ load("@ytt:data", "data")
#@ load("@ytt:struct", "struct")
#@ load("cnb-builders.star", "make_builder")

#@  stacks = data.values.stacks
#@  all_cnbs = struct.decode(data.values.cnbs)
#@  builders = [ make_builder(builder) for builder in data.values.builders ]

---

resource-types:
  - name: registry-image-resource
    type: docker-image
    source:
      repository: concourse/registry-image-resource
      tag: latest

resources:

#! Github Repos
  - name: buildpacks-ci
    type: git
    source:
      uri: ((buildpacks-ci-git-uri-public))
      branch: master

  - name: cnb-builder
    type: git
    source:
      uri: https://github.com/cloudfoundry/cnb-builder
      branch: master

  - name: p-cnb-builder
    type: git
    source:
      uri: git@github.com:pivotal-cf/p-cnb-builder
      private_key: ((cf-buildpacks-eng-github-ssh-key))
      branch: master

#@ for cnb in all_cnbs:
  - name: "(@= cnb['name'] @)-cnb-release"
    type: git
    check_every: 15m
    source:
      uri: #@ cnb["git_repo"]
      private_key: ((cf-buildpacks-eng-github-ssh-key))
      tag_filter: "v*"
#@ end

  - name: packager
    type: git
    source:
      uri: https://github.com/cloudfoundry/libcfbuildpack
      branch: master

  - name: pack-release
    type: github-release
    source:
      user: buildpack
      repository: pack
      access_token: ((buildpacks-github-token))
      globs: ['*-linux.tgz']

  - name: cnb-lifecycle-release
    type: github-release
    source:
      repository: lifecycle
      user: buildpack
      access_token: ((buildpacks-github-token))

#! Versions
#@ for builder in builders:
  - name: "(@= builder.version_key @)-version"
    type: semver
    source:
      initial_version: 0.0.1
      bucket: cnb-versions
      key: "builder/(@= builder.version_key @)"
      access_key_id: ((pivotal-offline-buildpacks-s3-access-key))
      secret_access_key: ((pivotal-offline-buildpacks-s3-secret-key))
#@ end

#! Docker Images
#@ for builder in builders:
  - name: "(@= builder.name @)-builder-image"
    type: registry-image
    source: #@ builder.source()

  - name: "(@= builder.name @)-rc-image"
    type: registry-image
    source:
      repository: gcr.io/cf-buildpacks/builder-rcs
      tag: #@ builder.tags()
      username: _json_key
      password: ((gcp-service-account-key))
#@ end

#@ for (stack, tag) in struct.decode(stacks).items():
  #@ for image in ["build", "run"]:
  - name: "(@= stack @)-(@= image @)-cnb-image"
    type: registry-image
    source:
      repository: "cloudfoundry/(@= image @)"
      tag: "(@= tag @)-cnb"
      username: ((buildpacks-docker-username))
      password: ((buildpacks-docker-password))
  #@ end
#@ end

  - name: ci-image
    type: registry-image
    source:
      repository: cfbuildpacks/ci
      username: ((buildpacks-docker-username))
      password: ((buildpacks-docker-password))

jobs:
#@ for builder in builders:
  - name: "create-(@= builder.name @)-builder-rc"
    plan:
      - in_parallel:
        - get: buildpacks-ci
        - get: ci-image
        - get: packager
        - get: pack
          resource: pack-release
          trigger: true
        - get: lifecycle
          resource: cnb-lifecycle-release
        - get: "(@= builder.stack @)-build-cnb-image"
          trigger: true
        - get: "(@= builder.stack @)-run-cnb-image"
          trigger: true
  #@ for cnb in builder.cnbs():
        - get: #@ cnb
          resource: "(@= cnb @)-release"
  #@ end
        - get: cnb-builder
  #@  if builder.private:
          resource: p-cnb-builder
  #@  end
        - get: version
          resource: "(@= builder.version_key @)-version"
          params:
            pre: rc
      - task: get-cnb-sources
        image: ci-image
        config:
          platform: linux
          inputs:
  #@ for cnb in builder.cnbs():
            - name: #@ cnb
  #@ end
          outputs:
            - name: sources
          run:
            path: bash
            args:
              - -cl
                #@ copies = ["cp -r {} sources/{}".format(c,c) for c in builder.cnbs()]
              - #@ '{}'.format('\n\n'.join(copies))
      - task: create-builder-image
        image: ci-image
        file: buildpacks-ci/tasks/create-builder/task.yml
        privileged: true
        params: #@ builder.image_params
      - put: "(@= builder.name @)-rc-image"
        params:
          additional_tags: tag/name
          image: builder-image/builder.tgz
      - put: version
        resource: "(@= builder.version_key @)-version"
        params:
          file: version/version

  - name: "test-(@= builder.name @)-builder-rc"
    plan:
      - get: buildpacks-ci
      - get: ci-image
      - get: builder-image
        resource: "(@= builder.name @)-rc-image"
        trigger: true
        passed: ["create-(@= builder.name @)-builder-rc"]
        params:
          format: oci
      - get: pack
        resource: pack-release
      - get: cnb-builder
  #@  if builder.private:
        resource: p-cnb-builder
  #@  end
      - task: smoke-test-builder
        image: ci-image
        file: buildpacks-ci/tasks/test-builder/task.yml
        privileged: true
        params:
          STACK: #@ builder.name
          REPO: gcr.io/cf-buildpacks/builder-rcs
          RUN_IMAGE: #@ builder.image_params.RUN_IMAGE

  - name: "ship-(@= builder.name @)-builder"
    plan:
      - get: buildpacks-ci
      - get: "(@= builder.name @)-rc-image"
        passed: ["test-(@= builder.name @)-builder-rc"]
        params:
          format: oci
      - get: version
        resource: "(@= builder.version_key @)-version"
        params:
          bump: final
          pre: #@ builder.name
          pre_without_version: true
      - task: write-tags-list
        image: ci-image
        file: buildpacks-ci/tasks/write-tags-list/task.yml
        params:
            TAGS: #@ builder.tags()
      - put: "(@= builder.name @)-builder-image"
        params:
          additional_tags: tags/tags
          image: "(@= builder.name @)-rc-image/image.tar"
      - put: version
        resource: "(@= builder.version_key @)-version"
        params:
          bump: patch
#@ end

groups:
  - name: all
    jobs:
#@ for builder in builders:
    - "create-(@= builder.name @)-builder-rc"
    - "test-(@= builder.name @)-builder-rc"
    - "ship-(@= builder.name @)-builder"
#@ end


#@ for builder in builders:
  - name: "(@= builder.name @)-builder"
    jobs:
    - "create-(@= builder.name @)-builder-rc"
    - "test-(@= builder.name @)-builder-rc"
    - "ship-(@= builder.name @)-builder"
#@ end
